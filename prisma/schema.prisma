//npx prisma generate
//npx prisma migrate dev --name {name}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  birthDay      DateTime?
  bio           String?
  gender        String?
  country       String?
  city          String?
  municipality  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts        Account[]
  sessions        Session[]
  interests       UserInterest[]
  addedActivities AddedActivity[]
  userAttendance  UserAttendance[]
  Feedback        Feedback[]
  Notification    Notification[]
}

model Activity {
  id     Int     @id @default(autoincrement())
  name   String
  image  String?
  status String? @default("Active")
  slug   String

  userInterests UserInterest[]
  addedActivity AddedActivity[]
}

model UserInterest {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int

  @@id([userId, activityId])
}

model AddedActivity {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  country      String
  city         String
  municipality String
  place        String
  googleMap    String?
  date         DateTime
  start        DateTime
  end          DateTime
  maxAttendees Int?
  price        Float?
  currency     String
  type         String
  status       String?  @default("Active")
  createdAt    DateTime @default(now())

  userId    String
  createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  attendees UserAttendance[]
  feedbacks Feedback[]
}

model UserAttendance {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  addedActivity   AddedActivity @relation(fields: [addedActivityId], references: [id])
  addedActivityId Int

  status          String   @default("Approved")
  statusUpdatedAt DateTime @default(now())

  @@id([userId, addedActivityId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Float
  createdAt DateTime @default(now())

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  AddedActivity   AddedActivity? @relation(fields: [addedActivityId], references: [id])
  addedActivityId Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  viewed    Boolean  @default(false)
  createdAt DateTime @default(now())

  createdFor User   @relation(fields: [userId], references: [id])
  userId     String
}

// Optional for WebAuthn support
//model Authenticator {
//    credentialID         String  @unique
//    userId               String
//   providerAccountId    String
//  credentialPublicKey  String
// counter              Int
//credentialDeviceType String
//credentialBackedUp   Boolean
//transports           String?

//user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//@@id([userId, credentialID])
//}
